"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var patchedSym = Symbol('axiosBetterStacktrace.patched');
// toString used instead of instanceOf for detecting error type to prevent problem mentioned in issue #5
var isError = function (error) {
    return error instanceof Error || Object.prototype.toString.call(error) === '[object Error]';
};
var isAxiosError = function (error) {
    return isError(error) && error.isAxiosError;
};
var axiosMethods = [
    'request',
    'get',
    'delete',
    'head',
    'options',
    'post',
    'put',
    'patch',
];
var axiosBetterStacktrace = function (axiosInstance, opts) {
    if (opts === void 0) { opts = {}; }
    var _a = opts.errorMsg, errorMsg = _a === void 0 ? 'Axios Better Stacktrace' : _a;
    // do nothing if input does not look like an axios instance
    if (!axiosInstance || !axiosMethods.some(function (method) { return axiosInstance.hasOwnProperty(method); })) {
        return;
    }
    // avoid potential memory leaks if axios instance already patched
    if (axiosInstance[patchedSym]) {
        return;
    }
    var originalHandlers = {
        request: axiosInstance['request'],
        get: axiosInstance['get'],
        delete: axiosInstance['delete'],
        head: axiosInstance['head'],
        options: axiosInstance['options'],
        post: axiosInstance['post'],
        put: axiosInstance['put'],
        patch: axiosInstance['patch'],
    };
    // enhance original response error with a topmostError stack trace
    var responseErrorInterceptorId = axiosInstance.interceptors.response.use(function (response) {
        if (response.config && isError(response.config.topmostError)) {
            // remove topmostError to not clutter config and expose it to other interceptors down the chain
            delete response.config.topmostError;
        }
        return response;
    }, function (error) {
        if (isAxiosError(error) && error.config && isError(error.config.topmostError)) {
            error.originalStack = error.stack;
            error.stack = "".concat(error.stack, "\n").concat(error.config.topmostError.stack);
            delete error.config.topmostError;
        }
        throw error;
    });
    axiosMethods.forEach(function (method) {
        if (method in axiosInstance) {
            switch (method) {
                case 'request': {
                    var originalHandler_1 = axiosInstance[method];
                    axiosInstance[method] = function axiosBetterStacktraceMethodProxy(config) {
                        return originalHandler_1(__assign(__assign({}, (config || {})), { topmostError: new Error(errorMsg) }));
                    };
                    break;
                }
                case 'get':
                case 'delete':
                case 'head':
                case 'options': {
                    var originalHandler_2 = axiosInstance[method];
                    axiosInstance[method] = function axiosBetterStacktraceMethodProxy(url, config) {
                        return originalHandler_2(url, __assign(__assign({}, (config || {})), { topmostError: new Error(errorMsg) }));
                    };
                    break;
                }
                case 'post':
                case 'put':
                case 'patch': {
                    var originalHandler_3 = axiosInstance[method];
                    axiosInstance[method] = function axiosBetterStacktraceMethodProxy(url, data, config) {
                        return originalHandler_3(url, data, __assign(__assign({}, (config || {})), { topmostError: new Error(errorMsg) }));
                    };
                    break;
                }
            }
            if (!axiosInstance[patchedSym]) {
                axiosInstance[patchedSym] = true;
            }
        }
    });
    // ensure consumer of the plugin can restore original handlers and remove custom interceptor
    return function () {
        axiosInstance.interceptors.response.eject(responseErrorInterceptorId);
        Object.assign(axiosInstance, originalHandlers);
    };
};
exports.default = axiosBetterStacktrace;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhpb3NCZXR0ZXJTdGFja3RyYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F4aW9zQmV0dGVyU3RhY2t0cmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFnQjNELHdHQUF3RztBQUN4RyxJQUFNLE9BQU8sR0FBRyxVQUFDLEtBQWM7SUFDN0IsT0FBQSxLQUFLLFlBQVksS0FBSyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxnQkFBZ0I7QUFBcEYsQ0FBb0YsQ0FBQztBQUV2RixJQUFNLFlBQVksR0FBRyxVQUFDLEtBQWM7SUFDbEMsT0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUssS0FBb0IsQ0FBQyxZQUFZO0FBQXBELENBQW9ELENBQUM7QUFFdkQsSUFBTSxZQUFZLEdBQUc7SUFDbkIsU0FBUztJQUNULEtBQUs7SUFDTCxRQUFRO0lBQ1IsTUFBTTtJQUNOLFNBQVM7SUFDVCxNQUFNO0lBQ04sS0FBSztJQUNMLE9BQU87Q0FDQyxDQUFDO0FBRVgsSUFBTSxxQkFBcUIsR0FBRyxVQUFDLGFBQTZCLEVBQUUsSUFBZ0M7SUFBaEMscUJBQUEsRUFBQSxTQUFnQztJQUNwRixJQUFBLEtBQXlDLElBQUksU0FBVCxFQUFwQyxRQUFRLG1CQUFHLHlCQUF5QixLQUFBLENBQVU7SUFFdEQsMkRBQTJEO0lBQzNELElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBcEMsQ0FBb0MsQ0FBQyxFQUFFO1FBQzFGLE9BQU87S0FDUjtJQUVELGlFQUFpRTtJQUNqRSxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUM3QixPQUFP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